{"project": "qiskit-aer", "project_url": "http://qiskit.org/aer", "show_commit_url": "#", "hash_length": 8, "revision_to_hash": {"344": "b660e8b5ca0a4d5fe719e860681f29812293bd59", "398": "21fdd7e7503dc8ac7dfaee24b927f26d1eff42f8", "579": "359b3df7c1d15d5720c3d5fe662ce5cbcc44ee12", "593": "e97502622f55c719577877d271cac195a5bd51b6", "644": "c67018df7fea125a746c9004a985bf131b8854f3", "649": "f12102310b02f91cdb7319fd2f74481691007630", "699": "ef1274c01d8b281458b1401083c178c288023005", "742": "2b7f65c4a30bb5cf6954fcf9b6ef22b1b00d7e4f", "753": "e180e4a7c85d404a4c3da28e3b55d0c3133a7d72", "804": "68e429e0de82e2c15806b37f13742e8741f47dd7", "864": "86a875824fc54ce67e99241b8e816c55d47eb830", "997": "248bc9e586fcf1015ec2ea68947a1a7824943202", "998": "0c9d732c309e8f8d13bd534ce6259cdea6fddc36"}, "revision_to_date": {"344": 1545172957000, "398": 1548418657000, "579": 1556791972000, "593": 1558367972000, "644": 1562767035000, "649": 1562840310000, "699": 1566225533000, "742": 1571146657000, "753": 1571319355000, "804": 1573724643000, "864": 1575929488000, "997": 1580766634000, "998": 1582001824000}, "params": {"arch": ["x86_64"], "cpu": ["Intel(R) Core(TM) i7-4870HQ CPU @ 2.50GHz"], "machine": ["Erics-MacBook-Pro.local"], "num_cpu": ["8"], "os": ["Darwin 18.7.0"], "ram": ["17179869184"], "python": ["3.6"], "branch": ["master"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-4870HQ CPU @ 2.50GHz", "machine": "Erics-MacBook-Pro.local", "num_cpu": "8", "os": "Darwin 18.7.0", "ram": "17179869184", "python": "3.6", "branch": "master"}], "benchmarks": {"fusion_benchmarks.QuantumFourierTransformFusionSuite.time_quantum_fourier_transform": {"code": "class QuantumFourierTransformFusionSuite:\n    def time_quantum_fourier_transform(self, num_qubit, fusion_enable, use_cu1):\n        \"\"\" Benchmark QFT \"\"\"\n        result = self.backend.run(self.circuit[(num_qubit, use_cu1)], backend_options={'fusion_enable': fusion_enable}).result()\n        if result.status != 'COMPLETED':\n            raise QiskitError(\"Simulation failed. Status: \" + result.status)", "min_run_count": 2, "name": "fusion_benchmarks.QuantumFourierTransformFusionSuite.time_quantum_fourier_transform", "number": 0, "param_names": ["Quantum Fourier Transform", "Fusion Activated", "Use cu1 gate"], "params": [["5", "10", "15", "20", "25"], ["True", "False"], ["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 1200, "type": "time", "unit": "seconds", "version": "b7bb539836e1d3fdf893230e71b40f0550294c23f4f1cb4adf1990f47475f4cf", "warmup_time": -1}, "fusion_benchmarks.RandomFusionSuite.time_random_transform": {"code": "class RandomFusionSuite:\n    def time_random_transform(self, num_qubits, fusion_enable):\n        circ = self.build_model_circuit_kak(num_qubits, num_qubits, 1)\n        qobj = assemble(circ)\n        result = self.backend.run(qobj, backend_options={'fusion_enable': fusion_enable}).result()\n        if result.status != 'COMPLETED':\n            raise QiskitError(\"Simulation failed. Status: \" + result.status)", "min_run_count": 2, "name": "fusion_benchmarks.RandomFusionSuite.time_random_transform", "number": 0, "param_names": ["Number of Qubits", "Fusion Activated"], "params": [["5", "10", "15", "20", "25"], ["True", "False"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 1200, "type": "time", "unit": "seconds", "version": "53672f19269a0d887c2be422d72696e99c928d7c4b7302b941772392cfd04ac8", "warmup_time": -1}, "quantum_fourier_transform_benchmarks.QuantumFourierTransformQasmSimulatorBenchSuite.peakmem_quantum_fourier_transform": {"code": "class QuantumFourierTransformQasmSimulatorBenchSuite:\n    def peakmem_quantum_fourier_transform(self, qobj, noise_model_wrapper,\n                                          simulator_method):\n        \"\"\" Benchmark QFT \"\"\"\n        backend_options = {\n            'method': simulator_method,\n            'noise_model': noise_model_wrapper(),\n        }\n        result = self.backend.run(\n            qobj, noise_model=noise_model_wrapper()\n        ).result()\n        if result.status != 'COMPLETED':\n            raise QiskitError(\"Simulation failed. Status: \" + result.status)\n\n    def setup(self, qobj, noise_model_wrapper, simulator_method):\n        \"\"\" Setup env before benchmarks start \"\"\"", "name": "quantum_fourier_transform_benchmarks.QuantumFourierTransformQasmSimulatorBenchSuite.peakmem_quantum_fourier_transform", "param_names": ["Quantum Fourier Transform", "Noise Model", "Simulator Method"], "params": [["Num. qubits: 5", "Num. qubits: 10", "Num. qubits: 15", "Num. qubits: 20"], ["No Noise", "Mixed Unitary Noise", "Reset Noise", "Kraus Noise"], ["'statevector'", "'density_matrix'", "'stabilizer'", "'extended_stabilizer'", "'matrix_product_state'"]], "timeout": 1200, "type": "peakmemory", "unit": "bytes", "version": "2edc82077a9b9a65c6ef0a07d92745306b4b3593a017a85c1cb8aa13a7c9f015"}, "quantum_fourier_transform_benchmarks.QuantumFourierTransformQasmSimulatorBenchSuite.time_quantum_fourier_transform": {"code": "class QuantumFourierTransformQasmSimulatorBenchSuite:\n    def time_quantum_fourier_transform(self, qobj, noise_model_wrapper,\n                                       simulator_method):\n        \"\"\" Benchmark QFT \"\"\"\n        backend_options = {\n            'method': simulator_method,\n            'noise_model': noise_model_wrapper(),\n        }\n        result = self.backend.run(\n            qobj, noise_model=noise_model_wrapper()\n        ).result()\n        if result.status != 'COMPLETED':\n            raise QiskitError(\"Simulation failed. Status: \" + result.status)\n\n    def setup(self, qobj, noise_model_wrapper, simulator_method):\n        \"\"\" Setup env before benchmarks start \"\"\"", "min_run_count": 2, "name": "quantum_fourier_transform_benchmarks.QuantumFourierTransformQasmSimulatorBenchSuite.time_quantum_fourier_transform", "number": 0, "param_names": ["Quantum Fourier Transform", "Noise Model", "Simulator Method"], "params": [["Num. qubits: 5", "Num. qubits: 10", "Num. qubits: 15", "Num. qubits: 20"], ["No Noise", "Mixed Unitary Noise", "Reset Noise", "Kraus Noise"], ["'statevector'", "'density_matrix'", "'stabilizer'", "'extended_stabilizer'", "'matrix_product_state'"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 1200, "type": "time", "unit": "seconds", "version": "e81c292cfd74449e8a7d5d4d4ed9a277966ca531f1d34281cebae1d4a481ba63", "warmup_time": -1}, "quantum_volume_benchmarks.QuantumVolumeTimeSuite.time_quantum_volume": {"code": "class QuantumVolumeTimeSuite:\n    def time_quantum_volume(self, qobj, noise_model_wrapper):\n        \"\"\" Benchmark for quantum volume \"\"\"\n        result = self.backend.run(\n            qobj, noise_model=noise_model_wrapper()\n        ).result()\n        if result.status != 'COMPLETED':\n            raise QiskitError(\"Simulation failed. Status: \" + result.status)\n\n    def setup(self, qobj, noise_model_wrapper):\n        \"\"\" Setup enviornment before running the tests \"\"\"", "min_run_count": 2, "name": "quantum_volume_benchmarks.QuantumVolumeTimeSuite.time_quantum_volume", "number": 0, "param_names": ["Quantum Volume", "Noise Model"], "params": [["Num. qubits: 5", "Num. qubits: 10", "Num. qubits: 15"], ["No Noise", "Mixed Unitary Noise", "Reset Noise", "Kraus Noise"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 1200, "type": "time", "unit": "seconds", "version": "74fd4a893ce034338576900df946b57406031d60fa38749d4dbf70a52983ca58", "warmup_time": -1}, "randomized_benchmarking.RandomizedBenchmarkingQasmSimBenchmark.peakmem_run_rb_circuit": {"code": "class RandomizedBenchmarkingQasmSimBenchmark:\n    def peakmem_run_rb_circuit(self, _, simulator_method, noise_model):\n        backend_options = {\n            'method': simulator_method,\n            'noise_model': noise_model(),\n        }\n        job = self.sim_backend.run(self.qobj,\n                                   backend_options=backend_options)\n        job.result()\n\n    def setup(self, rb_pattern, _, __):\n        length_vector = np.arange(1, 200, 4)\n        nseeds = 1\n        self.seed = 10\n        self.circuits = build_rb_circuit(nseeds=nseeds,\n                                         length_vector=length_vector,\n                                         rb_pattern=rb_pattern,\n                                         seed=self.seed)\n        self.sim_backend = Aer.get_backend('qasm_simulator')\n        trans_circ = transpile(self.circuits, backend=self.sim_backend,\n                               seed_transpiler=self.seed)\n        self.qobj = assemble(trans_circ, backend=self.sim_backend)", "name": "randomized_benchmarking.RandomizedBenchmarkingQasmSimBenchmark.peakmem_run_rb_circuit", "param_names": ["rb_pattern", "simulator_method", "noise_model"], "params": [["[[0]]", "[[0, 1]]", "[[0, 2], [1]]"], ["'statevector'", "'density_matrix'", "'stabilizer'", "'extended_stabilizer'", "'matrix_product_state'"], ["No Noise", "Mixed Unitary Noise", "Reset Noise", "Kraus Noise"]], "timeout": 600, "type": "peakmemory", "unit": "bytes", "version": "0.2.0"}, "randomized_benchmarking.RandomizedBenchmarkingQasmSimBenchmark.time_run_rb_circuit": {"code": "class RandomizedBenchmarkingQasmSimBenchmark:\n    def time_run_rb_circuit(self, _, simulator_method, noise_model):\n        backend_options = {\n            'method': simulator_method,\n            'noise_model': noise_model(),\n        }\n        job = self.sim_backend.run(self.qobj,\n                                   backend_options=backend_options)\n        job.result()\n\n    def setup(self, rb_pattern, _, __):\n        length_vector = np.arange(1, 200, 4)\n        nseeds = 1\n        self.seed = 10\n        self.circuits = build_rb_circuit(nseeds=nseeds,\n                                         length_vector=length_vector,\n                                         rb_pattern=rb_pattern,\n                                         seed=self.seed)\n        self.sim_backend = Aer.get_backend('qasm_simulator')\n        trans_circ = transpile(self.circuits, backend=self.sim_backend,\n                               seed_transpiler=self.seed)\n        self.qobj = assemble(trans_circ, backend=self.sim_backend)", "min_run_count": 2, "name": "randomized_benchmarking.RandomizedBenchmarkingQasmSimBenchmark.time_run_rb_circuit", "number": 0, "param_names": ["rb_pattern", "simulator_method", "noise_model"], "params": [["[[0]]", "[[0, 1]]", "[[0, 2], [1]]"], ["'statevector'", "'density_matrix'", "'stabilizer'", "'extended_stabilizer'", "'matrix_product_state'"], ["No Noise", "Mixed Unitary Noise", "Reset Noise", "Kraus Noise"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "0.2.0", "warmup_time": -1}, "simple_benchmarks.SimpleCxTimeSuite.time_simple_cx": {"code": "class SimpleCxTimeSuite:\n    def time_simple_cx(self, qobj, noise_model_wrapper):\n        \"\"\" Benchmark for circuits with a simple cx gate \"\"\"\n        result = self.backend.run(\n            qobj, noise_model=noise_model_wrapper()\n        ).result()\n        if result.status != 'COMPLETED':\n            raise QiskitError(\"Simulation failed. Status: \" + result.status)", "min_run_count": 2, "name": "simple_benchmarks.SimpleCxTimeSuite.time_simple_cx", "number": 0, "param_names": ["Simple cnot circuits", "Noise Model"], "params": [["Num. qubits: 5", "Num. qubits: 10", "Num. qubits: 15"], ["No Noise", "Mixed Unitary Noise", "Reset Noise", "Kraus Noise"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 1200, "type": "time", "unit": "seconds", "version": "e90f2020a832006de2854ccabcd8f511355dad1bebf022d0878c93462f4b34a1", "warmup_time": -1}, "simple_benchmarks.SimpleU3TimeSuite.time_simple_u3": {"code": "class SimpleU3TimeSuite:\n    def time_simple_u3(self, qobj, noise_model_wrapper):\n        \"\"\" Benchmark for circuits with a simple u3 gate \"\"\"\n        result = self.backend.run(\n            qobj, noise_model=noise_model_wrapper()\n        ).result()\n        if result.status != 'COMPLETED':\n            raise QiskitError(\"Simulation failed. Status: \" + result.status)", "min_run_count": 2, "name": "simple_benchmarks.SimpleU3TimeSuite.time_simple_u3", "number": 0, "param_names": ["Simple u3 circuits", "Noise Model"], "params": [["Num. qubits: 5", "Num. qubits: 10", "Num. qubits: 15"], ["No Noise", "Mixed Unitary Noise", "Reset Noise", "Kraus Noise"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 1200, "type": "time", "unit": "seconds", "version": "adf97784710e39934400d5424f20149faea159c249b6d72e29dc9456aa4d5c29", "warmup_time": -1}}, "machines": {"Erics-MacBook-Pro.local": {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-4870HQ CPU @ 2.50GHz", "machine": "Erics-MacBook-Pro.local", "num_cpu": "8", "os": "Darwin 18.7.0", "ram": "17179869184", "version": 1}}, "tags": {"0.1.0": 344, "0.1.1": 398, "0.2.0": 579, "0.2.1": 593, "0.2.2": 644, "0.2.3": 649, "0.3.0": 699, "0.3.1": 742, "0.3.2": 753, "0.3.3": 804, "0.3.4": 864}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}